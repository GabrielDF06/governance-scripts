name: Reusable Trivy Build, Scan, and Save

on:
  workflow_call:
    inputs:
      service-name:
        description: 'The name of the service (e.g., backend, frontend)'
        required: true
        type: string
      service-context-path:
        description: 'The path to the Docker build context for the service'
        required: true
        type: string
      image-name:
        description: 'The full name of the image to build and scan'
        required: true
        type: string
    secrets:
      GH_TOKEN:
        description: 'A GITHUB_TOKEN with packages:write permission'
        required: true

jobs:
  build-scan-and-save:
    name: Build & Scan ${{ inputs.service-name }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write # Needed for docker login to pull base images
    
    steps:
      - name: Checkout Caller's Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}

      # We will create a unique tag for this build to reference locally
      - name: Generate unique image tag
        id: image_tag
        run: echo "tag=${{ inputs.image-name }}:ci-${{ github.run_id }}-${{ github.run_attempt }}" >> $GITHUB_OUTPUT

      # Step 1: Build the image and load it locally
      - name: Build image for scanning
        uses: docker/build-push-action@v4
        with:
          context: ${{ inputs.service-context-path }}
          load: true
          tags: ${{ steps.image_tag.outputs.tag }}
          push: false

      # Step 2: Run Trivy Scan. This will now FAIL the build if vulnerabilities are found.
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.image_tag.outputs.tag }}
          format: 'table' # Changed to table for cleaner log output
          severity: 'HIGH,CRITICAL'
          ignore-unfixed: true
          exit-code: '1' # This will fail the job and stop the entire workflow

      # Step 3: If scan passes, save the image to a tarball
      - name: Save Docker image to tarball
        run: docker save ${{ steps.image_tag.outputs.tag }} -o ${{ inputs.service-name }}.tar

      # Step 4: Upload the tarball as an artifact
      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: image-artifact-${{ inputs.service-name }}
          path: ${{ inputs.service-name }}.tar
          retention-days: 1